I"™'<p>Once PHP developers get familiar with the basics of local development with Docker, the next thing they always ask me about is deploying their projects. Running containers in production is a complicated problem, and because each project is different, there‚Äôs not just one solution that works for everyone. I‚Äôve written before about <a href="https://www.shiphp.com/blog/2017/deploying-php-hyper-sh">using Hyper.sh</a>, but I‚Äôve also used <a href="https://aws.amazon.com/ecs/">Amazon‚Äôs EC2</a> and <a href="http://rancher.com/">Rancher</a>.</p>

<p>But, there‚Äôs one new option that I recently discovered that might be the most straightforward Docker hosting platform I‚Äôve seen: <a href="https://codemason.io/">Codemason</a>. With Codemason, the configuration is minimal, and after you connect your own server (it takes about 3 minutes to set one up with <a href="https://m.do.co/c/888fefc32a01">DigitalOcean</a>), Codemason can have your app deployed in a matter of minutes without doing anything on the command line. While I‚Äôve gotten very comfortable operating in the terminal, I can appreciate a good GUI because it allows other developers to more quickly see what you‚Äôve done and how everything works.</p>

<p>After using Codemason, I got to ask Ben Maggacis, the project‚Äôs founder, some questions about it. Below are some of Ben‚Äôs insights into how Codemason works and tips for PHP developers trying to learn Docker.</p>

<p><img src="https://i.imgur.com/IEAbbFm.png" alt="" /></p>

<h2 id="interview-with-ben-maggacis-creator-of-codemason">Interview with Ben Maggacis, creator of Codemason</h2>

<h3 id="how-long-have-you-been-working-with-docker-what-languages-do-you-primarily-program-in">How long have you been working with Docker? What languages do you primarily program in?</h3>

<p>I‚Äôve been working with Docker in some form for at least 2 years now. After reading about it a few times, when I needed to setup my development environment for a new project, I decided to try it out.</p>

<p>The main thing I remember was how easy it was to use after initial learning curve. Being able to spin all kinds of software up and to have it almost immediately working was like magic. I think as developers, it‚Äôs especially exciting to us when something comes along and surprises you like that. After that experience, I was convinced. I understood what the excitement was about and have been using Docker ever since.</p>

<p>Eventually my interest in Docker led me starting <a href="https://codemason.io/">Codemason</a>, a service that simplifies building, deploying, running and scaling container-based applications.</p>

<p>I mainly work in PHP and JavaScript with Laravel, Nodejs and Vuejs. In my opinion, Laravel and Vuejs are frameworks that completely understand the importance of the developer experience.</p>

<h3 id="are-you-working-full-time-on-codemason-or-is-it-a-side-project">Are you working full time on CodeMason or is it a side project?</h3>

<p>I love working on Codemason and I balance it with my other commitments. There‚Äôs an entire world of overcomplicated DevOp problems that get in the way of developers building their apps and I get to hunt them down turn them into something trivial for our users.</p>

<p>Plus, to me, there‚Äôs just something really satisfying about writing code that controls infrastructure and containers, running it and watching (eventually) run perfectly ‚Äî you get to create that magic feeling.</p>

<h3 id="tell-me-about-how-codemason-came-about">Tell me about how Codemason came about?</h3>

<p>The idea for Codemason came about when I was working on another project that used Docker. By then, I was a bit more familiar with Docker and had started get more opinionated about how I thought things should be done - how Dockerfiles should be structured, what should be in containers, etc.</p>

<p>Eventually it got to a point where I started seeing all these over-complications of obstacles everywhere within the  ‚ÄúDevOps‚Äù side of things. I‚Äôd look up these obstacles and see that other developers all faced them and each them could be solved in about a dozen different ways. It seemed strange that we were all trying to solve the same problems in our own different ways, especially when it so much of it can be consolidated.</p>

<p>It was always planned as a software as a service offering but I intended to use it on a couple of my own projects first to make sure it was something really useful.</p>

<h3 id="are-there-any-primary-use-cases-for-codemason-or-do-you-see-it-being-widely-usable-for-any-kind-of-docker-hosting">Are there any primary use cases for Codemason or do you see it being widely usable for any kind of Docker hosting?</h3>

<p>Codemason is widely usable for any kind of Docker hosting. While we definitely have a ‚ÄúCodemason way‚Äù of doing things and a soft spot for web apps, it can handle any container-based project.</p>

<p>The ‚ÄúCodemason way‚Äù is our opinionated approach to deploying, managing and scaling. By being opinionated, we can make decisions about things so our users don‚Äôt have to ‚Äî the last thing we wanted to do was to create another service/tool that left developers with more questions than answers. We want to free them up to spend more time on the things that create real value for their apps/business.</p>

<p>That‚Äôs why we created Craft Kits. You can use a Craft Kit to turn any app into a Docker app with one command (<code class="highlighter-rouge">mason craft php</code>), you don‚Äôt even need to know Docker and and you can even swap out the services a Craft Kit uses with ease (<code class="highlighter-rouge">mason craft php --with="php, mysql"</code>). They‚Äôre available for everyone to use, even if you‚Äôre not on Codemason but the official ones, because they‚Äôre opinionated, work seamlessly with the Codemason deployment process.</p>

<h3 id="technically-how-does-codemason-work">Technically, how does Codemason work?</h3>

<p>Codemason is very robust. Behind the scenes we use a variety of open source projects that power a lot of the functionality which we tie together with the dashboard in a totally seamless way.</p>

<ul>
  <li><strong>Docker</strong> - Everything that Codemason runs on your server is a container. Because it‚Äôs containerised, we don‚Äôt need to know what‚Äôs inside, we can just worry about running it</li>
  <li><strong>Rancher</strong> - Codemason wraps Rancher which does a lot of the heavy lifting when it comes to orchestrating Docker containers</li>
  <li><strong>GitLab</strong> - We integrate with GitLab‚Äôs repositories (pushing your code to Codemason), CI runner (building your image) and the built-in private image registry.</li>
</ul>

<p>We keep a list of key technologies and open source projects that help Codemason on our <a href="https://codemason.io/thanks">Thank You page</a>.</p>

<p>The Codemason dashboard is built with <a href="https://laravel.com/">Laravel</a> and <a href="https://spark.laravel.com/">Spark</a> on the backend and <a href="https://vuejs.org/">Vuejs</a> on the frontend. Spark is a Laravel package that provides scaffolding for SaaS applications - it‚Äôs been great so far and has saved a considerable amount of time. I also extended Spark to support multiple subscriptions which we use for to bill for our managed add-ons. I‚Äôll be publishing a blog post explaining how to extend Spark to support multiple subscriptions soon.</p>

<p>The other key part of Codemason is the <a href="https://codemason.io/docs/master/creating-apps">Mason CLI</a>. The Mason CLI is a completely open source command line tool built with Node.js that you can use to improve your development and deployment experience.</p>

<h3 id="what-future-plans-do-you-have-for-the-project">What future plans do you have for the project?</h3>

<p>I want to keep improving and expanding on Codemason. I am really happy with what we have so far, it works great, it looks great and the developer experience is excellent but there‚Äôs so much more we can do! There is an entire world of DevOps obstacles that can be cleared out of the way for developers.</p>

<p>We‚Äôre going to be focusing on expanding the existing build system to make it a full featured CI/CD pipeline, adding more managed add-ons and continuing to make it even easier to get ahead of scalability issues.</p>

<h3 id="what-resources-do-you-recommend-for-devs-who-want-to-learn-docker-either-starting-out-or-advanced-any-books-blogs-or-articles-youve-found-helpful">What resources do you recommend for devs who want to learn Docker (either starting out or advanced)? Any books, blogs, or articles you‚Äôve found helpful?</h3>

<p>The <a href="https://docs.docker.com/get-started/">official Docker docs</a> are actually pretty useful and worth checking out if you‚Äôre new to Docker but they‚Äôre a pretty dense read. So for people just getting started with Docker, I‚Äôd recommend checking out <a href="https://runnable.com/docker/">Runnable‚Äôs slash Docker project</a>. It‚Äôs a series of posts that cover basically everything you need to know about Docker. They cover a couple of different languages not just PHP.</p>

<p>When I first started playing with Docker, there wasn‚Äôt too much information about building PHP applications with Docker so I mostly learned from tutorials written for other languages and adapted that back to PHP. Fortunately, thanks to projects like Shiphp, that information is being made readily available for PHP developers, so it‚Äôs especially easy for people get started.</p>

<p>If you really want to immerse yourself in Docker, don‚Äôt shy away from Docker tutorials that are in different programming languages. For example, this <a href="http://www.oreilly.com/programming/free/files/docker-for-java-developers.pdf">Docker for Java developers ebook</a> is Java focused but a lot of the concepts it covers are transferable.</p>

<p>Finally, if you‚Äôre wanting to start looking into more DevOps related concepts, the team at <a href="https://rancher.com/">Rancher</a> frequently do a lot of interesting webinars and blog posts which are also worth checking out.</p>
:ET